using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace UnityConstantsGenerator.SourceGenerator
{
    class CSharpSourceGenerator
    {
        private readonly TextWriter _writer;

        private readonly IndentState _indent = new IndentState();

        private readonly List<CSharpType> _types = new List<CSharpType>();
        
        public CSharpSourceGenerator(TextWriter writer)
        {
            _writer = writer;
        }

        public void AddCSharpType(CSharpType type) => _types.Add(type);

        private void WriteOneLine(string text)
        {
            _writer.Write(_indent);
            _writer.Write(text);
            WriteNewLine();
        }

        private void WriteNewLine() => _writer.Write('\n');

        public void Generate()
        {
            WriteTagComment("This file is auto-generated by UniEnum.", "auto-generated");
            WriteUsingNamespaces(_types.SelectMany(v => v.UsingNamespaces).Distinct().ToList());

            var nsGroups = _types.GroupBy(v => v.Namespace, v => v);
            foreach (var nsGroup in nsGroups)
            {
                WriteOneLine("namespace " + nsGroup.Key);
                WriteOneLine("{");
                using (_indent.Scope)
                {
                    foreach (var type in nsGroup)
                    {
                        switch (type)
                        {
                            case CSharpClass @class:
                                WriteClass(@class);
                                break;
                        
                            case CSharpEnum @enum:
                                WriteEnum(@enum);
                                break;
                        }
                        WriteNewLine();
                    }
                }
                WriteOneLine("}");
                WriteNewLine();
            }
        }

        private void WriteUsingNamespaces(List<string> usingNamespaces)
        {
            foreach (var ns in usingNamespaces)
            {
                WriteOneLine("using " + ns + ";");
            }

            WriteNewLine();
        }

        private void WriteEnum(CSharpEnum @enum)
        {
            WriteSummaryComment(@enum.Comment);
            if (@enum.IsFlags)
            {
                WriteOneLine("[System.Flags]");
            }
            WriteOneLine(@enum.GetClassDeclareString());
            WriteOneLine("{");
            using (_indent.Scope)
            {
                foreach (var field in @enum.Fields)
                { 
                    WriteSummaryComment(field.Comment);
                    WriteOneLine(field.ToEnumDeclareString());
                    WriteNewLine();
                }
            }

            WriteOneLine("}");
        }

        private void WriteClass(CSharpClass @class)
        {
            WriteSummaryComment(@class.Comment);
            WriteOneLine(@class.GetClassDeclareString());
            WriteOneLine("{");
            using (_indent.Scope)
            {
                foreach (var field in @class.Fields)
                { 
                    WriteSummaryComment(field.Comment);
                    WriteOneLine(field.ToFieldDeclareString());
                    WriteNewLine();
                }
            }

            WriteOneLine("}");
        }

        private void WriteSummaryComment(string comment)
        {
            WriteTagComment(comment, "summary");
        }
        
        private void WriteTagComment(string comment, string tag)
        {
            if (string.IsNullOrEmpty(comment))
                return;
            
            var lines = comment.Split('\n');
            WriteOneLine($"/// <{tag}>");
            foreach (var line in lines)
            {
                WriteOneLine("/// " + line);
            }
            WriteOneLine($"/// </{tag}>");
        }
    }
}
